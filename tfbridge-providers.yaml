AWSTemplateFormatVersion: '2010-09-09'
Description: example provider configurations you can try
Transform: AWS::Serverless-2016-10-31

Parameters:
  DigitalOceanToken:
    Type: String
    NoEcho: true
    Default: ''
  GithubToken:
    Type: String
    NoEcho: true
    Default: ''
  GithubOrg:
    Type: String
    Default: ''
  GitlabToken:
    Type: String
    NoEcho: true
    Default: ''
  NetlifyToken:
    Type: String
    NoEcho: true
    Default: ''

Conditions:
  #isAws: !Not [!Equals ['', !Ref Azure]]
  #isAzure: !Not [!Equals ['', !Ref Azure]]
  isDigitalOcean: !Not [!Equals ['', !Ref DigitalOceanToken]]
  isGithub: !Not [!Equals ['', !Ref GithubToken]]
  isGitlab: !Not [!Equals ['', !Ref GitlabToken]]
  #isGoogle: !Not [!Equals ['', !Ref Google]]
  isNetlify: !Not [!Equals ['', !Ref NetlifyToken]]
  #isPostgresql: !Not [!Equals ['', !Ref Postgresql]]

Resources:
  HttpProviderConfig:
    Properties:
      CodeUri: ./dist/package-http.zip
      FunctionName: !Sub ${AWS::StackName}-http
      Handler: main
      MemorySize: 128
      Role: !Sub '${DefaultRole.Arn}'
      Runtime: go1.x
      Timeout: 30
    Type: AWS::Serverless::Function

#  Aws:
#    Condition: isAws
#    Properties:
#      CodeUri: ./dist/package-aws.zip
#      FunctionName: !Sub ${AWS::StackName}-aws
#      Handler: main
#      MemorySize: 256
#      #Policies:
#      Role: !Sub '${DefaultRole.Arn}'
#      Runtime: go1.x
#      Timeout: 30
#    Type: AWS::Serverless::Function

  Github:
    Condition: isGithub
    Properties:
      CodeUri: ./dist/package-github.zip
      Environment:
        Variables:
          GITHUB_TOKEN: !Ref GithubToken
          GITHUB_ORGANIZATION: !Ref GithubOrg
      FunctionName: !Sub ${AWS::StackName}-github
      Handler: main
      MemorySize: 256
      Role: !Sub '${DefaultRole.Arn}'
      Runtime: go1.x
      Timeout: 30
    Type: AWS::Serverless::Function

  Gitlab:
    Condition: isGitlab
    Properties:
      CodeUri: ./dist/package-gitlab.zip
      Environment:
        Variables:
          GITLAB_TOKEN: !Ref GitlabToken
      FunctionName: !Sub ${AWS::StackName}-gitlab
      Handler: main
      MemorySize: 256
      Role: !Sub '${DefaultRole.Arn}'
      Runtime: go1.x
      Timeout: 30
    Type: AWS::Serverless::Function

#  Azure:
#    Condition: isAzure
#    Properties:
#      CodeUri: ./dist/package-azure.zip
#      FunctionName: !Sub ${AWS::StackName}-azure
#      Handler: main
#      MemorySize: 256
#      Role: !Sub '${DefaultRole.Arn}'
#      Runtime: go1.x
#      Timeout: 30
#    Type: AWS::Serverless::Function

#  Google:
#    Condition: isGoogle
#    Properties:
#      CodeUri: ./dist/package-google.zip
#      FunctionName: !Sub ${AWS::StackName}-google
#      Handler: main
#      MemorySize: 256
#      Role: !Sub '${DefaultRole.Arn}'
#      Runtime: go1.x
#      Timeout: 30
#    Type: AWS::Serverless::Function

  Netlify:
    Condition: isNetlify
    Properties:
      CodeUri: ./dist/package-netlify.zip
      Environment:
        Variables:
          NETLIFY_TOKEN: !Ref NetlifyToken
      FunctionName: !Sub ${AWS::StackName}-netlify
      Handler: main
      MemorySize: 256
      Role: !Sub '${DefaultRole.Arn}'
      Runtime: go1.x
      Timeout: 30
    Type: AWS::Serverless::Function

  DigitalOcean:
    Condition: isDigitalOcean
    Properties:
      CodeUri: ./dist/package-digitalocean.zip
      Environment:
        Variables:
          DIGITALOCEAN_TOKEN: !Ref DigitalOceanToken
      FunctionName: !Sub ${AWS::StackName}-digitalocean
      Handler: main
      MemorySize: 256
      Role: !Sub '${DefaultRole.Arn}'
      Runtime: go1.x
      Timeout: 180
    Type: AWS::Serverless::Function

#  Kubernetes:
#     #long list of params here: https://github.com/terraform-providers/terraform-provider-kubernetes/blob/master/kubernetes/provider.go#L21
#    Condition: isKubernetes
#    Properties:
#      CodeUri: ./dist/package-kubernetes.zip
#      Environment:
#        Variables:
#          #
#      FunctionName: !Sub ${AWS::StackName}-kubernetes
#      Handler: main
#      MemorySize: 256
#      Role: !Sub '${DefaultRole.Arn}'
#      Runtime: go1.x
#      Timeout: 180
#    Type: AWS::Serverless::Function

#  Postgresql:
     # long list of params here: https://github.com/terraform-providers/terraform-provider-postgresql/blob/master/postgresql/provider.go#L20
#    Condition: isPostgresql
#    Properties:
#      CodeUri: ./dist/package-postgresql.zip
#      Environment:
#        Variables:
#          #
#      FunctionName: !Sub ${AWS::StackName}-postgresql
#      Handler: main
#      MemorySize: 256
#      Role: !Sub '${DefaultRole.Arn}'
#      Runtime: go1.x
#      Timeout: 180
#    Type: AWS::Serverless::Function

  DefaultRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
